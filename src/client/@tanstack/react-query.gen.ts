// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch'
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions
} from '@tanstack/react-query'
import {
  client,
  getApiV1Healthcheck,
  getApiV1TokenStats,
  postApiV1TokenStats,
  getApiV1TokenStatsLatest
} from '../services.gen'
import type {
  GetApiV1TokenStatsData,
  GetApiV1TokenStatsError,
  GetApiV1TokenStatsResponse,
  PostApiV1TokenStatsData,
  PostApiV1TokenStatsError,
  PostApiV1TokenStatsResponse,
  GetApiV1TokenStatsLatestData
} from '../types.gen'

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  }
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const getApiV1HealthcheckQueryKey = (options?: Options) => [
  createQueryKey('getApiV1Healthcheck', options)
]

export const getApiV1HealthcheckOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiV1Healthcheck({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      return data
    },
    queryKey: getApiV1HealthcheckQueryKey(options)
  })
}

export const getApiV1TokenStatsQueryKey = (
  options: Options<GetApiV1TokenStatsData>
) => [createQueryKey('getApiV1TokenStats', options)]

export const getApiV1TokenStatsOptions = (
  options: Options<GetApiV1TokenStatsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiV1TokenStats({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      return data
    },
    queryKey: getApiV1TokenStatsQueryKey(options)
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = queryKey[0]
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any)
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers
    }
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path
    }
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query
    }
  }
  return params as unknown as typeof page
}

export const getApiV1TokenStatsInfiniteQueryKey = (
  options: Options<GetApiV1TokenStatsData>
): QueryKey<Options<GetApiV1TokenStatsData>> => [
  createQueryKey('getApiV1TokenStats', options, true)
]

export const getApiV1TokenStatsInfiniteOptions = (
  options: Options<GetApiV1TokenStatsData>
) => {
  return infiniteQueryOptions<
    GetApiV1TokenStatsResponse,
    GetApiV1TokenStatsError,
    InfiniteData<GetApiV1TokenStatsResponse>,
    QueryKey<Options<GetApiV1TokenStatsData>>,
    | string
    | Pick<
        QueryKey<Options<GetApiV1TokenStatsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiV1TokenStatsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  startDate: pageParam
                }
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getApiV1TokenStats({
          ...options,
          ...params,
          throwOnError: true
        })
        return data
      },
      queryKey: getApiV1TokenStatsInfiniteQueryKey(options)
    }
  )
}

export const postApiV1TokenStatsQueryKey = (
  options: Options<PostApiV1TokenStatsData>
) => [createQueryKey('postApiV1TokenStats', options)]

export const postApiV1TokenStatsOptions = (
  options: Options<PostApiV1TokenStatsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiV1TokenStats({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      return data
    },
    queryKey: postApiV1TokenStatsQueryKey(options)
  })
}

export const postApiV1TokenStatsMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiV1TokenStatsResponse,
    PostApiV1TokenStatsError,
    Options<PostApiV1TokenStatsData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiV1TokenStats({
        ...options,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getApiV1TokenStatsLatestQueryKey = (
  options: Options<GetApiV1TokenStatsLatestData>
) => [createQueryKey('getApiV1TokenStatsLatest', options)]

export const getApiV1TokenStatsLatestOptions = (
  options: Options<GetApiV1TokenStatsLatestData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiV1TokenStatsLatest({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      return data
    },
    queryKey: getApiV1TokenStatsLatestQueryKey(options)
  })
}
